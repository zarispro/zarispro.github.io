(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.kgPlayStatReportMin = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * 获取 UA
     * @return {string}
     */
    function getUserAgent() {
        var userAgent = navigator.userAgent || navigator.vendor || window.opera;
        return userAgent.toLowerCase();
    }
    /**
     * 判断是否是手机
     * @return {boolean}
     */
    function isMobile() {
        var userAgent = getUserAgent();
        return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series([46])0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(userAgent) ||
            // eslint-disable-next-line
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br([ev])w|bumb|bw-([nu])|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do([cp])o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly([-_])|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-([mpt])|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c([- _agpst])|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac([ -\/])|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja([tv])a|jbro|jemu|jigs|kddi|keji|kgt([ \/])|klon|kpt |kwc-|kyo([ck])|le(no|xi)|lg( g|\/([klu])|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t([- ov])|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30([02])|n50([025])|n7(0([01])|10)|ne(([cm])-|on|tf|wf|wg|wt)|nok([6i])|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan([adt])|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c([-01])|47|mc|nd|ri)|sgh-|shar|sie([-m])|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel([im])|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c([- ])|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(userAgent.substr(0, 4)));
    }
    /**
     * 判断是否是 android 设备
     * @return {boolean}
     */
    function isAndroid() {
        return /android/i.test(getUserAgent());
    }
    /**
     * 判断是否 ios 设备
     * @return {boolean}
     */
    function isIOS() {
        return (/iPad|iPhone|iPod/i.test(getUserAgent()) && !window.MSStream);
    }
    /**
     * 是否是 微信 设备
     * @return {boolean}
     */
    function isWeiXin() {
        var userAgent = getUserAgent();
        return String(userAgent.match(/MicroMessenger/i)) === 'micromessenger';
    }
    /**
     * 判断是否是手机qq
     * @return {boolean}
     */
    function isMQQ() {
        var userAgent = getUserAgent();
        var isIOSQQ = isIOS() && / QQ/i.test(userAgent);
        var isAndroidQQ = isAndroid() &&
            /MQQBrowser/i.test(navigator.userAgent) &&
            /QQ/i.test(userAgent.split('mqqbrowser'));
        return isMobile() && (isIOSQQ || isAndroidQQ);
    }
    /**
     * 判断是否是手机微博 UA
     * @return {boolean}
     */
    function isMWeibo() {
        var userAgent = getUserAgent();
        return isMobile() && /(weibo)/.test(userAgent);
    }
    /**
     * 判断是否是酷狗客户端
     */
    function isKUGOU() {
        var userAgent = getUserAgent();
        if (isIOS()) {
            return !!/KGBrowser/ig.test(userAgent);
        }
        var isKugouAndroid = userAgent.match(/kugouandroid/ig);
        return !!isKugouAndroid;
    }
    function loadScript(_a) {
        var url = _a.url, fn = _a.fn;
        var oScript = document.createElement('script');
        if (fn) {
            oScript.onload = fn;
        }
        document.getElementsByTagName('head')[0].appendChild(oScript);
        oScript.src = url;
    }
    /**
     * 从酷狗客户端 js 回调获取用户信息
     */
    var getUserInfo = function () {
        return new Promise(function (resolve, reject) {
            var KgMobileCall = window.KgMobileCall;
            if (!KgMobileCall)
                resolve({ kugouID: '' });
            KgMobileCall.getUserInfo(function (res) {
                if (res && res.kugouID) {
                    resolve(res);
                }
                else {
                    resolve({ kugouID: '' });
                }
            });
        });
    };
    /**
     * 从酷狗客户端 js 回调获取客户端信息
     */
    var getMobileInfo = function () {
        return new Promise(function (resolve, reject) {
            var KgMobileCall = window.KgMobileCall;
            if (!KgMobileCall)
                resolve({ mid: '', phoneNum: '' });
            KgMobileCall.getMobileInfo(function (res) {
                if (res && res.mid) {
                    resolve(res);
                }
                else {
                    resolve({ mid: '', phoneNum: '' });
                }
            });
        });
    };
    var mobileLog = function (bussiness, countInfo, callback, option) {
        var data = countInfo;
        var sendData = [bussiness, data, callback, option];
        window.apmCollectData = window.apmCollectData || [];
        window.apmCollectData.push(sendData);
        console.log('mobileLog', sendData);
        try {
            window.newLogCount();
        }
        catch (ex) {
            /* tslint:disable:no-empty */
        }
    };
    function transformToArray(arr) {
        return Array.prototype.slice.call(arr);
    }

    // 如果 KgMobileCall 不存在则加载这个 js 文件
    loadNecessaryJS();
    var FS = {
        SUCCESS: '播放成功',
        FAIL: '播放失败'
    };
    var FT = {
        VIDEO: '视频播放',
        AUDIO: '音频播放'
    };
    /**
     * 自动上报 video 和 audio 埋点
     * 使用方式：
     * ```typescript
     *  // 初始化自动上报类，填入比如信息： r  为目前页面的类型，比如：专题模板或者酷狗号等，a 值可填可不填
     *  const playStatReport = new PlayStatReport({ r: '专题模板', a: '' });
     *  // 当 video 或者 audio 标签成功加载到页面之后，调用
     *  playStatReport.startInjectStatReport();
     *  // 当需要动态改变基础参数时
     *  playStatReport.injectBaseParams({})
     * ```
     * ```html
     *  // 埋点要上传的 hash 值需要使用 data-hash 在标签标明
     *  <video data-hash="modwbxiwjdlajyywncprelkx"></video>
     *  <audio data-hash="modwbxiwjdlajyywncprelkx"></audio>
     * ```
     */
    var PlayStatReport = /** @class */ (function () {
        function PlayStatReport(args) {
            var _this = this;
            this.canReportVideostat = true;
            this.canReportAudioStat = true;
            this._prevHash = '';
            this.mediaEvents = ['loadstart', 'ended', 'timeupdate', 'playing', 'error'];
            /**
             * 根据事件类型和参数来判断是否上报打点
             * @param event 事件对象
             */
            this.catureAndReportStat = function (event) {
                if (!(event && event.target))
                    return;
                var target = event.target;
                var nodeName = target.nodeName.toUpperCase();
                var KeyOfCanReportStat = nodeName === 'VIDEO'
                    ? 'canReportVideostat'
                    : nodeName === 'AUDIO'
                        ? 'canReportAudioStat'
                        : 'canReportVideostat';
                var hash = target.getAttribute('data-hash') || _this.baseParams.hash || '';
                var svar2 = target.getAttribute('data-svar2') || _this.baseParams.svar2 || '';
                var svar3 = target.getAttribute('data-svar3') || _this.baseParams.svar3 || '';
                var autoplay = target.getAttribute('autoplay') === 'autoplay';
                var reportParams = {
                    svar2: svar2,
                    hash: hash,
                    ft: FT[nodeName],
                    svar1: _this.baseParams.svar1,
                    svar3: svar3
                };
                var progress = target.currentTime / target.duration;
                var isJustStartPlay = target.currentTime > 1 &&
                    event.type === 'timeupdate' &&
                    progress < 0.98 &&
                    (hash === _this._prevHash ? _this[KeyOfCanReportStat] : true);
                var isPlayEnded = event.type === 'ended' ||
                    (event.type === 'timeupdate' && target.currentTime + 1 > target.duration);
                if (event.type === 'error') {
                    // 播放错误
                    console.log(nodeName + ' report error');
                    _this.report(__assign({}, reportParams, { fs: FS.FAIL }));
                }
                else if (isJustStartPlay) {
                    // 播放成功，且刚开始播放
                    console.log('report success');
                    console.log('hash', hash);
                    console.log('target', target.currentTime);
                    _this.report(__assign({}, reportParams, { fs: FS.SUCCESS }));
                    _this._prevHash = hash;
                    _this[KeyOfCanReportStat] = false;
                }
                else if (isPlayEnded) {
                    // 播放结束
                    _this[KeyOfCanReportStat] = true;
                    console.log('end');
                }
            };
            this.baseParams = args;
            this.checkAndInjectArgs().catch();
        }
        /**
         * 检查 userid，b，mid, fo 值，不存在则自动注入
         */
        PlayStatReport.prototype.checkAndInjectArgs = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.baseParams.mid) return [3 /*break*/, 2];
                            _a = this.baseParams;
                            return [4 /*yield*/, getMobileInfo()];
                        case 1:
                            _a.mid = (_c.sent()).mid;
                            _c.label = 2;
                        case 2:
                            if (!this.baseParams.b)
                                this.baseParams.b = 'H5播放统计';
                            if (!this.baseParams.fo)
                                this.baseParams.fo = this.getFo();
                            if (!!this.baseParams.userid) return [3 /*break*/, 4];
                            _b = this.baseParams;
                            return [4 /*yield*/, getUserInfo()];
                        case 3:
                            _b.userid = (_c.sent()).kugouID;
                            _c.label = 4;
                        case 4:
                            if (!this.baseParams.a)
                                this.baseParams.a = '20537';
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 获取播放来源
         */
        PlayStatReport.prototype.getFo = function () {
            var FoList = {
                酷狗客户端: isKUGOU(),
                微信: isWeiXin(),
                qq: isMQQ(),
                微博: isMWeibo(),
                其他: false
            };
            for (var key in FoList) {
                if (FoList[key])
                    return key;
            }
            return '其他';
        };
        /**
         *  上报打点
         * @param hash 素材 hash
         * @param fs 播放成功或者失败
         * @param ft 音频播放 或者 视频播放
         * @param svar1 MV | 歌曲/歌单/专辑/排行榜/播放列表
         * @param svar2 歌单id/专辑id
         * @param svar3 mixsongid （svar1=歌曲时上报mixsongid，以此类推）
         */
        PlayStatReport.prototype.report = function (data) {
            var r = this.baseParams.r + "-" + document.title;
            var timestamp = +new Date();
            var params = Object.assign({}, this.baseParams, { r: r, timestamp: timestamp }, data);
            mobileLog(30050, params, null, false);
        };
        /**
         * 开始给此时当前页面的 video 或者 audio 标签注入埋点上报
         */
        PlayStatReport.prototype.startInjectStatReport = function (elements) {
            var _this = this;
            if (!elements) {
                var $videos = transformToArray(document.getElementsByTagName('video'));
                var $audios = transformToArray(document.getElementsByTagName('audio'));
                elements = [].concat($videos).concat($audios);
            }
            elements.filter(Boolean).forEach(function (el) {
                _this.mediaEvents.forEach(function (event) {
                    el.addEventListener(event, _this.catureAndReportStat, false);
                });
            });
        };
        /**
         * 动态修改基础参数
         */
        PlayStatReport.prototype.injectBaseParams = function (args) {
            this.baseParams = Object.assign({}, this.baseParams, args);
            this.checkAndInjectArgs().catch();
        };
        return PlayStatReport;
    }());
    window.PlayStatReport = PlayStatReport;
    function loadNecessaryJS() {
        if (!window.KgMobileCall) {
            loadScript({ url: 'https://m3ws.kugou.com/static/js/common/mobilecall_3.0.js' });
        }
        if (!window.newLogCount) {
            loadScript({ url: 'https://staticssl.kugou.com/collect/common/dist/js/collect-2400.js' });
        }
        assignPolyfill();
    }
    function assignPolyfill() {
        if (typeof Object.assign != 'function') {
            // Must be writable: true, enumerable: false, configurable: true
            Object.defineProperty(Object, 'assign', {
                value: function assign(target, varArgs) {
                    if (target == null) {
                        // TypeError if undefined or null
                        throw new TypeError('Cannot convert undefined or null to object');
                    }
                    var to = Object(target);
                    for (var index = 1; index < arguments.length; index++) {
                        var nextSource = arguments[index];
                        if (nextSource != null) {
                            // Skip over if undefined or null
                            for (var nextKey in nextSource) {
                                // Avoid bugs when hasOwnProperty is shadowed
                                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                    to[nextKey] = nextSource[nextKey];
                                }
                            }
                        }
                    }
                    return to;
                },
                writable: true,
                configurable: true
            });
        }
    }

    return PlayStatReport;

})));
//# sourceMappingURL=kg-play-stat-report.es5.min.js.map
